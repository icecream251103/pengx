import { LoanProposal, LoanFormData, CreditAnalysis } from '../types/LoanTypes';

// Service class ƒë·ªÉ x·ª≠ l√Ω t·∫°o ƒë·ªÅ xu·∫•t vay
export class LoanProposalService {
  
  /**
   * T·∫°o ID duy nh·∫•t cho ƒë·ªÅ xu·∫•t vay
   */
  private static generateLoanId(): string {
    const timestamp = Date.now().toString(36);
    const randomPart = Math.random().toString(36).substr(2, 5);
    return `LP_${timestamp}_${randomPart}`.toUpperCase();
  }

  /**
   * T·∫°o ƒë·ªãa ch·ªâ v√≠ gi·∫£ l·∫≠p cho ng∆∞·ªùi vay
   */
  private static generateBorrowerAddress(): string {
    const chars = '0123456789abcdef';
    let address = '0x';
    for (let i = 0; i < 8; i++) {
      address += chars[Math.floor(Math.random() * 16)];
    }
    address += '...';
    for (let i = 0; i < 4; i++) {
      address += chars[Math.floor(Math.random() * 16)];
    }
    return address;
  }

  /**
   * Chuy·ªÉn ƒë·ªïi t·ª´ USD sang t√†i s·∫£n ƒë∆∞·ª£c ch·ªçn
   */
  private static convertUSDToAsset(usdAmount: number, currency: string): number {
    const usdToAssetRates = {
      USD: 1,
      ETH: 1 / 3830.31,
      BTC: 1 / 118416.70,
      PenGx: 1 / 3294.04,
      USDC: 1
    };
    const rate = usdToAssetRates[currency as keyof typeof usdToAssetRates] || 1;
    return usdAmount * rate;
  }

  /**
   * X√°c ƒë·ªãnh m·ª©c ƒë·ªô r·ªßi ro d·ª±a tr√™n ƒëi·ªÉm t√≠n d·ª•ng
   */
  private static determineRiskLevel(creditScore: number): 'low' | 'medium' | 'high' {
    if (creditScore >= 680) return 'low';
    if (creditScore >= 580) return 'medium';
    return 'high';
  }

  /**
   * Chuy·ªÉn ƒë·ªïi ngh·ªÅ nghi·ªáp sang lo·∫°i ng∆∞·ªùi vay
   */
  private static mapProfessionToBorrowerType(profession: string): 'student' | 'employee' | 'worker' | 'small_business' {
    switch (profession) {
      case 'student':
        return 'student';
      case 'employee':
      case 'teacher':
      case 'healthcare':
      case 'tech':
        return 'employee';
      case 'worker':
        return 'worker';
      case 'small_business':
      case 'freelancer':
        return 'small_business';
      default:
        return 'employee';
    }
  }

  /**
   * L·∫•y m√¥ t·∫£ m·ª•c ƒë√≠ch vay
   */
  private static getPurposeDescription(formData: LoanFormData): string {
    const purposeMap = {
      education: 'H·ªçc ph√≠ / Chi ph√≠ gi√°o d·ª•c',
      living: 'Chi ph√≠ sinh ho·∫°t',
      business: 'V·ªën kinh doanh / Kh·ªüi nghi·ªáp',
      emergency: 'Chi ph√≠ kh·∫©n c·∫•p / Y t·∫ø',
      home: 'S·ª≠a ch·ªØa / C·∫£i thi·ªán nh√† ·ªü',
      travel: 'Du l·ªãch / Ngh·ªâ d∆∞·ª°ng',
      debt: 'H·ª£p nh·∫•t n·ª£',
      investment: 'ƒê·∫ßu t∆∞ c√° nh√¢n',
      other: formData.customPurpose || 'M·ª•c ƒë√≠ch kh√°c'
    };
    return purposeMap[formData.purpose];
  }

  /**
   * T·∫°o ƒë·ªÅ xu·∫•t vay t·ª´ d·ªØ li·ªáu form v√† k·∫øt qu·∫£ ph√¢n t√≠ch
   */
  static createLoanProposal(
    formData: LoanFormData, 
    creditAnalysis: CreditAnalysis,
    onSuccess?: (proposal: LoanProposal) => void,
    onError?: (error: string) => void
  ): Promise<LoanProposal> {
    return new Promise((resolve, reject) => {
      try {
        // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!formData.usdAmount || formData.usdAmount < 100 || formData.usdAmount > 100000) {
          const error = 'S·ªë ti·ªÅn vay kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ $100 - $100,000)';
          onError?.(error);
          reject(new Error(error));
          return;
        }

        const actualTerm = formData.term || parseInt(formData.customTerm) || 6;
        if (actualTerm < 1 || actualTerm > 60) {
          const error = 'K·ª≥ h·∫°n vay kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 1-60 th√°ng)';
          onError?.(error);
          reject(new Error(error));
          return;
        }

        if (creditAnalysis.approvalChance < 15) {
          const error = 'ƒê∆°n vay kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ph√™ duy·ªát. Vui l√≤ng c·∫£i thi·ªán h·ªì s∆° v√† th·ª≠ l·∫°i.';
          onError?.(error);
          reject(new Error(error));
          return;
        }

        // T·∫°o ƒë·ªÅ xu·∫•t vay m·ªõi
        const assetAmount = this.convertUSDToAsset(formData.usdAmount, formData.currency);
        
        const loanProposal: LoanProposal = {
          id: this.generateLoanId(),
          borrower: this.generateBorrowerAddress(),
          amount: assetAmount,
          term: actualTerm,
          purpose: this.getPurposeDescription(formData),
          creditScore: creditAnalysis.creditScore,
          creditGrade: creditAnalysis.creditGrade,
          interestRate: creditAnalysis.interestRate,
          fundedAmount: 0, // B·∫Øt ƒë·∫ßu t·ª´ 0, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi c√≥ ng∆∞·ªùi cho vay
          status: 'funding' as const,
          riskLevel: this.determineRiskLevel(creditAnalysis.creditScore),
          borrowerType: this.mapProfessionToBorrowerType(formData.profession),
          currency: formData.currency
        };

        // Simulate t·∫°o ƒë·ªÅ xu·∫•t v·ªõi delay th·ª±c t·∫ø
        setTimeout(() => {
          try {
            // Th√™m m·ªôt s·ªë validation cu·ªëi c√πng
            if (creditAnalysis.interestRate > 30) {
              const error = 'L√£i su·∫•t qu√° cao, kh√¥ng th·ªÉ t·∫°o ƒë·ªÅ xu·∫•t. Vui l√≤ng c·∫£i thi·ªán ƒëi·ªÅu ki·ªán vay.';
              onError?.(error);
              reject(new Error(error));
              return;
            }

            // Th√†nh c√¥ng
            onSuccess?.(loanProposal);
            resolve(loanProposal);
          } catch (err) {
            const error = 'L·ªói khi t·∫°o ƒë·ªÅ xu·∫•t vay. Vui l√≤ng th·ª≠ l·∫°i.';
            onError?.(error);
            reject(new Error(error));
          }
        }, 2000); // 2 gi√¢y ƒë·ªÉ simulate th·ªùi gian x·ª≠ l√Ω

      } catch (err) {
        const error = 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ƒë·ªÅ xu·∫•t vay';
        onError?.(error);
        reject(new Error(error));
      }
    });
  }

  /**
   * T√≠nh to√°n ph√≠ x·ª≠ l√Ω d·ª±a tr√™n s·ªë ti·ªÅn v√† lo·∫°i t√†i s·∫£n
   */
  static calculateProcessingFee(usdAmount: number, currency: string): number {
    let baseFeeRate = 0.015; // 1.5% c∆° b·∫£n
    
    // ƒêi·ªÅu ch·ªânh ph√≠ theo lo·∫°i t√†i s·∫£n
    switch (currency) {
      case 'PenGx':
        baseFeeRate = 0.010; // Gi·∫£m ph√≠ cho PenGx users
        break;
      case 'USDC':
        baseFeeRate = 0.012; // Ph√≠ th·∫•p h∆°n cho stablecoin
        break;
      case 'ETH':
      case 'BTC':
        baseFeeRate = 0.018; // Ph√≠ cao h∆°n cho crypto bi·∫øn ƒë·ªông
        break;
    }

    return usdAmount * baseFeeRate;
  }

  /**
   * T·∫°o th√¥ng b√°o th√†nh c√¥ng sau khi t·∫°o ƒë·ªÅ xu·∫•t
   */
  static generateSuccessMessage(proposal: LoanProposal, formData: LoanFormData): {
    title: string;
    message: string;
    nextSteps: string[];
  } {
    const assetAmount = this.convertUSDToAsset(formData.usdAmount, formData.currency);
    
    return {
      title: 'üéâ ƒê·ªÅ xu·∫•t vay ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!',
      message: `ƒê·ªÅ xu·∫•t vay ${proposal.id} c·ªßa b·∫°n v·ªõi s·ªë ti·ªÅn ${this.formatCurrency(assetAmount, formData.currency)} ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v√†o h·ªá th·ªëng v√† s·∫µn s√†ng ƒë·ªÉ c√°c nh√† ƒë·∫ßu t∆∞ xem x√©t.`,
      nextSteps: [
        'ƒê·ªÅ xu·∫•t c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã trong danh s√°ch cho vay trong v√≤ng 5-10 ph√∫t',
        'C√°c nh√† ƒë·∫ßu t∆∞ s·∫Ω b·∫Øt ƒë·∫ßu ƒë√°nh gi√° v√† c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√¢y qu·ªπ',
        `V·ªõi ƒëi·ªÉm t√≠n d·ª•ng ${proposal.creditScore} v√† l√£i su·∫•t ${proposal.interestRate}%, d·ª± ki·∫øn s·∫Ω g√¢y qu·ªπ th√†nh c√¥ng trong 2-7 ng√†y`,
        'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua email khi c√≥ ti·∫øn tri·ªÉn',
        'C√≥ th·ªÉ theo d√µi ti·∫øn ƒë·ªô g√¢y qu·ªπ trong tab "Lend" c·ªßa ·ª©ng d·ª•ng'
      ]
    };
  }

  /**
   * Format ti·ªÅn t·ªá ƒë·ªÉ hi·ªÉn th·ªã
   */
  private static formatCurrency(amount: number, currency: string): string {
    if (isNaN(amount) || amount === 0) {
      return `0 ${currency}`;
    }
    
    switch (currency) {
      case 'USD':
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 0
        }).format(amount);
      case 'ETH':
        return `${amount.toFixed(4)} ETH`;
      case 'BTC':
        return `${amount.toFixed(6)} BTC`;
      case 'PenGx':
        return `${amount.toLocaleString()} PenGx`;
      case 'USDC':
        return `${amount.toLocaleString()} USDC`;
      default:
        return `${amount.toLocaleString()} ${currency}`;
    }
  }

  /**
   * Validate form data tr∆∞·ªõc khi t·∫°o ƒë·ªÅ xu·∫•t
   */
  static validateLoanForm(formData: LoanFormData): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Ki·ªÉm tra s·ªë ti·ªÅn
    if (!formData.usdAmount || formData.usdAmount < 100) {
      errors.push('S·ªë ti·ªÅn vay t·ªëi thi·ªÉu l√† $100');
    }
    if (formData.usdAmount > 100000) {
      errors.push('S·ªë ti·ªÅn vay t·ªëi ƒëa l√† $100,000');
    }

    // Ki·ªÉm tra k·ª≥ h·∫°n
    const actualTerm = formData.term || parseInt(formData.customTerm) || 0;
    if (actualTerm < 1) {
      errors.push('K·ª≥ h·∫°n vay ph·∫£i √≠t nh·∫•t 1 th√°ng');
    }
    if (actualTerm > 60) {
      errors.push('K·ª≥ h·∫°n vay t·ªëi ƒëa l√† 60 th√°ng');
    }

    // Ki·ªÉm tra m·ª•c ƒë√≠ch
    if (formData.purpose === 'other' && !formData.customPurpose?.trim()) {
      errors.push('Vui l√≤ng m√¥ t·∫£ m·ª•c ƒë√≠ch vay khi ch·ªçn "M·ª•c ƒë√≠ch kh√°c"');
    }

    // Ki·ªÉm tra thu nh·∫≠p cho kho·∫£n vay l·ªõn
    if (formData.usdAmount > 10000 && !formData.monthlyIncome?.trim()) {
      errors.push('Vay tr√™n $10,000 c·∫ßn ph·∫£i khai b√°o thu nh·∫≠p h√†ng th√°ng');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }
}
